/*
 * さくらのVPS APIドキュメント
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.5.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package helper

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the ApiKeyAPI part of the API
	ApiKeyAPI ApiKeyAPI
	// Routes for the DiscAPI part of the API
	DiscAPI DiscAPI
	// Routes for the NfsServerAPI part of the API
	NfsServerAPI NfsServerAPI
	// Routes for the ServerAPI part of the API
	ServerAPI ServerAPI
	// Routes for the SwitchAPI part of the API
	SwitchAPI SwitchAPI
	// Routes for the ZoneAPI part of the API
	ZoneAPI ZoneAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"DeleteApiKey",
			http.MethodDelete,
			"/vps/api/v7/api-keys/:api_key_id",
			handleFunctions.ApiKeyAPI.DeleteApiKey,
		},
		{
			"DeleteRole",
			http.MethodDelete,
			"/vps/api/v7/roles/:role_id",
			handleFunctions.ApiKeyAPI.DeleteRole,
		},
		{
			"GetApiKey",
			http.MethodGet,
			"/vps/api/v7/api-keys/:api_key_id",
			handleFunctions.ApiKeyAPI.GetApiKey,
		},
		{
			"GetApiKeyList",
			http.MethodGet,
			"/vps/api/v7/api-keys",
			handleFunctions.ApiKeyAPI.GetApiKeyList,
		},
		{
			"GetPermissionList",
			http.MethodGet,
			"/vps/api/v7/permissions",
			handleFunctions.ApiKeyAPI.GetPermissionList,
		},
		{
			"GetRole",
			http.MethodGet,
			"/vps/api/v7/roles/:role_id",
			handleFunctions.ApiKeyAPI.GetRole,
		},
		{
			"GetRoleList",
			http.MethodGet,
			"/vps/api/v7/roles",
			handleFunctions.ApiKeyAPI.GetRoleList,
		},
		{
			"PostApiKey",
			http.MethodPost,
			"/vps/api/v7/api-keys",
			handleFunctions.ApiKeyAPI.PostApiKey,
		},
		{
			"PostApiKeyRotate",
			http.MethodPost,
			"/vps/api/v7/api-keys/:api_key_id/rotate",
			handleFunctions.ApiKeyAPI.PostApiKeyRotate,
		},
		{
			"PostRole",
			http.MethodPost,
			"/vps/api/v7/roles",
			handleFunctions.ApiKeyAPI.PostRole,
		},
		{
			"PutApiKey",
			http.MethodPut,
			"/vps/api/v7/api-keys/:api_key_id",
			handleFunctions.ApiKeyAPI.PutApiKey,
		},
		{
			"PutRole",
			http.MethodPut,
			"/vps/api/v7/roles/:role_id",
			handleFunctions.ApiKeyAPI.PutRole,
		},
		{
			"GetDiscList",
			http.MethodGet,
			"/vps/api/v7/discs",
			handleFunctions.DiscAPI.GetDiscList,
		},
		{
			"GetNfsServer",
			http.MethodGet,
			"/vps/api/v7/nfs-servers/:nfs_server_id",
			handleFunctions.NfsServerAPI.GetNfsServer,
		},
		{
			"GetNfsServerInterface",
			http.MethodGet,
			"/vps/api/v7/nfs-servers/:nfs_server_id/interface",
			handleFunctions.NfsServerAPI.GetNfsServerInterface,
		},
		{
			"GetNfsServerList",
			http.MethodGet,
			"/vps/api/v7/nfs-servers",
			handleFunctions.NfsServerAPI.GetNfsServerList,
		},
		{
			"GetNfsServerPowerStatus",
			http.MethodGet,
			"/vps/api/v7/nfs-servers/:nfs_server_id/power-status",
			handleFunctions.NfsServerAPI.GetNfsServerPowerStatus,
		},
		{
			"GetNfsServerStorage",
			http.MethodGet,
			"/vps/api/v7/nfs-servers/:nfs_server_id/storage",
			handleFunctions.NfsServerAPI.GetNfsServerStorage,
		},
		{
			"PostNfsServerChangeIpv4",
			http.MethodPost,
			"/vps/api/v7/nfs-servers/:nfs_server_id/change-ipv4",
			handleFunctions.NfsServerAPI.PostNfsServerChangeIpv4,
		},
		{
			"PostNfsServerForceReboot",
			http.MethodPost,
			"/vps/api/v7/nfs-servers/:nfs_server_id/force-reboot",
			handleFunctions.NfsServerAPI.PostNfsServerForceReboot,
		},
		{
			"PostNfsServerPowerOn",
			http.MethodPost,
			"/vps/api/v7/nfs-servers/:nfs_server_id/power-on",
			handleFunctions.NfsServerAPI.PostNfsServerPowerOn,
		},
		{
			"PostNfsServerShutdown",
			http.MethodPost,
			"/vps/api/v7/nfs-servers/:nfs_server_id/shutdown",
			handleFunctions.NfsServerAPI.PostNfsServerShutdown,
		},
		{
			"PutNfsServer",
			http.MethodPut,
			"/vps/api/v7/nfs-servers/:nfs_server_id",
			handleFunctions.NfsServerAPI.PutNfsServer,
		},
		{
			"PutNfsServerInterface",
			http.MethodPut,
			"/vps/api/v7/nfs-servers/:nfs_server_id/interface",
			handleFunctions.NfsServerAPI.PutNfsServerInterface,
		},
		{
			"DeleteServerMonitorings",
			http.MethodDelete,
			"/vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id",
			handleFunctions.ServerAPI.DeleteServerMonitorings,
		},
		{
			"GetServer",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id",
			handleFunctions.ServerAPI.GetServer,
		},
		{
			"GetServerInterface",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/interfaces/:interface_id",
			handleFunctions.ServerAPI.GetServerInterface,
		},
		{
			"GetServerInterfaceList",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/interfaces",
			handleFunctions.ServerAPI.GetServerInterfaceList,
		},
		{
			"GetServerLimitation",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/limitation",
			handleFunctions.ServerAPI.GetServerLimitation,
		},
		{
			"GetServerList",
			http.MethodGet,
			"/vps/api/v7/servers",
			handleFunctions.ServerAPI.GetServerList,
		},
		{
			"GetServerMonitoring",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id",
			handleFunctions.ServerAPI.GetServerMonitoring,
		},
		{
			"GetServerMonitoringHealth",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id/health",
			handleFunctions.ServerAPI.GetServerMonitoringHealth,
		},
		{
			"GetServerMonitoringList",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/monitorings",
			handleFunctions.ServerAPI.GetServerMonitoringList,
		},
		{
			"GetServerPowerStatus",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/power-status",
			handleFunctions.ServerAPI.GetServerPowerStatus,
		},
		{
			"GetServerVideoDevice",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/video-device",
			handleFunctions.ServerAPI.GetServerVideoDevice,
		},
		{
			"GetServerVncConsoleKeymap",
			http.MethodGet,
			"/vps/api/v7/servers/:server_id/vnc-console-keymap",
			handleFunctions.ServerAPI.GetServerVncConsoleKeymap,
		},
		{
			"PostServerForceReboot",
			http.MethodPost,
			"/vps/api/v7/servers/:server_id/force-reboot",
			handleFunctions.ServerAPI.PostServerForceReboot,
		},
		{
			"PostServerMonitoring",
			http.MethodPost,
			"/vps/api/v7/servers/:server_id/monitorings",
			handleFunctions.ServerAPI.PostServerMonitoring,
		},
		{
			"PostServerMountDisc",
			http.MethodPost,
			"/vps/api/v7/servers/:server_id/mount-disc",
			handleFunctions.ServerAPI.PostServerMountDisc,
		},
		{
			"PostServerPowerOn",
			http.MethodPost,
			"/vps/api/v7/servers/:server_id/power-on",
			handleFunctions.ServerAPI.PostServerPowerOn,
		},
		{
			"PostServerShutdown",
			http.MethodPost,
			"/vps/api/v7/servers/:server_id/shutdown",
			handleFunctions.ServerAPI.PostServerShutdown,
		},
		{
			"PutServer",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id",
			handleFunctions.ServerAPI.PutServer,
		},
		{
			"PutServerInterface",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/interfaces/:interface_id",
			handleFunctions.ServerAPI.PutServerInterface,
		},
		{
			"PutServerIpv4Ptr",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/ipv4-ptr",
			handleFunctions.ServerAPI.PutServerIpv4Ptr,
		},
		{
			"PutServerIpv6Ptr",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/ipv6-ptr",
			handleFunctions.ServerAPI.PutServerIpv6Ptr,
		},
		{
			"PutServerMonitoring",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id",
			handleFunctions.ServerAPI.PutServerMonitoring,
		},
		{
			"PutServerVideoDevice",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/video-device",
			handleFunctions.ServerAPI.PutServerVideoDevice,
		},
		{
			"PutServerVncConsoleKeymap",
			http.MethodPut,
			"/vps/api/v7/servers/:server_id/vnc-console-keymap",
			handleFunctions.ServerAPI.PutServerVncConsoleKeymap,
		},
		{
			"DeleteSwitch",
			http.MethodDelete,
			"/vps/api/v7/switches/:switch_id",
			handleFunctions.SwitchAPI.DeleteSwitch,
		},
		{
			"GetSwitch",
			http.MethodGet,
			"/vps/api/v7/switches/:switch_id",
			handleFunctions.SwitchAPI.GetSwitch,
		},
		{
			"GetSwitchList",
			http.MethodGet,
			"/vps/api/v7/switches",
			handleFunctions.SwitchAPI.GetSwitchList,
		},
		{
			"PostSwitch",
			http.MethodPost,
			"/vps/api/v7/switches",
			handleFunctions.SwitchAPI.PostSwitch,
		},
		{
			"PutSwitch",
			http.MethodPut,
			"/vps/api/v7/switches/:switch_id",
			handleFunctions.SwitchAPI.PutSwitch,
		},
		{
			"GetZoneList",
			http.MethodGet,
			"/vps/api/v7/zones",
			handleFunctions.ZoneAPI.GetZoneList,
		},
	}
}
