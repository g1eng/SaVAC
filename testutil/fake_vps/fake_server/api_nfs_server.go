/*
 * さくらのVPS APIドキュメント
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.5.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package helper

import (
	"fmt"

	sakuravps "github.com/g1eng/sakura_vps_client_go"
	"github.com/g1eng/savac/testutil/test_parameters"
	"github.com/gin-gonic/gin"
)

type NfsServerAPI struct {
}

// GetNfsServer Get /vps/api/v7/nfs-servers/:nfs_server_id
// NFS情報を取得する
func (api *NfsServerAPI) GetNfsServer(c *gin.Context) {
	if c.Param("nfs_server_id") == fmt.Sprintf("%d", test_parameters.DefaultNfsServer.Id) {
		res := test_parameters.DefaultNfsServer
		c.JSON(200, res)
	} else {
		c.JSON(404, nil)
	}
}

// GetNfsServerInterface Get /vps/api/v7/nfs-servers/:nfs_server_id/interface
// NFSのインターフェースを取得する
func (api *NfsServerAPI) GetNfsServerInterface(c *gin.Context) {
	if c.Param("nfs_server_id") == fmt.Sprintf("%d", test_parameters.DefaultNfsServer.Id) {
		res := test_parameters.DefaultNfsServerInterface
		c.JSON(200, res)
	} else {
		c.JSON(404, nil)
	}
}

// GetNfsServerList Get /vps/api/v7/nfs-servers
// NFS情報一覧を取得する
func (api *NfsServerAPI) GetNfsServerList(c *gin.Context) {
	res := sakuravps.NewGetNfsServerList200ResponseWithDefaults()
	res.Results = append(res.Results, *test_parameters.DefaultNfsServer)
	c.JSON(200, res)
}

// GetNfsServerPowerStatus Get /vps/api/v7/nfs-servers/:nfs_server_id/power-status
// NFSの電源状態を取得する
func (api *NfsServerAPI) GetNfsServerPowerStatus(c *gin.Context) {
	res := sakuravps.NewNfsServerPowerStatusWithDefaults()
	res.Status = "power_off"
	c.JSON(200, res)
}

// GetNfsServerStorage Get /vps/api/v7/nfs-servers/:nfs_server_id/storage
// NFSのストレージ容量情報を取得する
func (api *NfsServerAPI) GetNfsServerStorage(c *gin.Context) {
	if c.Param("nfs_server_id") == fmt.Sprintf("%d", test_parameters.DefaultNfsServer.Id) {
		res := sakuravps.NewNfsStorageInfoWithDefaults()
		res.UsageKib = 102400
		res.CapacityKib = 1024 * 1024
		c.JSON(200, res)
	} else {
		c.JSON(404, nil)
	}
}

// PostNfsServerChangeIpv4 Post /vps/api/v7/nfs-servers/:nfs_server_id/change-ipv4
// NFSのipv4を更新する
func (api *NfsServerAPI) PostNfsServerChangeIpv4(c *gin.Context) {
	if c.Param("nfs_server_id") == fmt.Sprintf("%d", test_parameters.DefaultNfsServer.Id) {
		if test_parameters.DefaultNfsServer.PowerStatus == "on" {
			c.JSON(409, gin.H{"code": "conflict"})
		} else {
			var req PostNfsServerChangeIpv4Request
			err := c.ShouldBindJSON(&req)
			if err != nil {
				c.JSON(400, gin.H{"code": "bad", "message": err.Error()})
				return
			}
			ip := sakuravps.NewNfsServerIpv4(req.Address, req.Netmask)
			test_parameters.DefaultNfsServer.Ipv4 = *ip
			c.JSON(200, test_parameters.DefaultNfsServer)
		}
	}
	c.JSON(200, gin.H{"status": "OK"})
}

// PostNfsServerForceReboot Post /vps/api/v7/nfs-servers/:nfs_server_id/force-reboot
// NFSを強制再起動する
func (api *NfsServerAPI) PostNfsServerForceReboot(c *gin.Context) {
	test_parameters.DefaultNfsServer.PowerStatus = "on"
	c.JSON(200, gin.H{"status": "OK"})
}

// PostNfsServerPowerOn Post /vps/api/v7/nfs-servers/:nfs_server_id/power-on
// NFSを起動する
func (api *NfsServerAPI) PostNfsServerPowerOn(c *gin.Context) {
	test_parameters.DefaultNfsServer.PowerStatus = "on"
	c.JSON(200, gin.H{"status": "OK"})
}

// PostNfsServerShutdown Post /vps/api/v7/nfs-servers/:nfs_server_id/shutdown
// NFSをシャットダウンする
func (api *NfsServerAPI) PostNfsServerShutdown(c *gin.Context) {
	test_parameters.DefaultNfsServer.PowerStatus = "power_off"
	c.JSON(200, gin.H{"status": "OK"})
}

type PutNfsServerRequest struct {
	Name        sakuravps.NullableString `json:"name,omitempty"`
	Description sakuravps.NullableString `json:"description,omitempty"`
}

// PutNfsServer Put /vps/api/v7/nfs-servers/:nfs_server_id
// NFS情報を更新する
func (api *NfsServerAPI) PutNfsServer(c *gin.Context) {
	if c.Param("nfs_server_id") == fmt.Sprintf("%d", test_parameters.DefaultNfsServer.Id) {
		var req PutNfsServerRequest
		err := c.ShouldBindJSON(&req)
		if err != nil {
			c.JSON(400, gin.H{"code": "bad", "message": err.Error()})
			return
		}
		if req.Name.IsSet() {
			test_parameters.DefaultNfsServer.Name = *req.Name.Get()
		}
		if req.Description.IsSet() {
			test_parameters.DefaultNfsServer.Name = *req.Description.Get()
		}
		c.JSON(200, test_parameters.DefaultNfsServer)
	} else {
		c.JSON(404, nil)
	}
}

// PutNfsServerInterface Put /vps/api/v7/nfs-servers/:nfs_server_id/interface
// NFSのインターフェース情報を更新する
func (api *NfsServerAPI) PutNfsServerInterface(c *gin.Context) {
	if c.Param("nfs_server_id") != fmt.Sprintf("%d", test_parameters.DefaultNfsServerInterfaceId) {
		//var reqRaw sakuravps.ApiPutNfsServerInterfaceRequest
		//err := c.ShouldBindJSON(&reqRaw)
		//if err != nil {
		//	c.JSON(400, gin.H{"code": "bad", "message": err.Error()})
		//	return
		//}
		var req NfsServerInterface
		err := c.ShouldBindJSON(&req)
		if err != nil {
			c.JSON(400, gin.H{"code": "very bad", "message": err.Error()})
			return
		}
		i := req.SwitchId
		//i, err := strconv.Atoi(s)
		//if err != nil {
		//	c.JSON(400, gin.H{"code": "bad", "message": err.Error()})
		//	return
		//}
		//i2 := int32(i)
		iff := test_parameters.DefaultNfsServerInterface

		if req.SwitchId == nil || *req.SwitchId == 0 {
			iff.SwitchId.Unset()
			iff.ConnectTo.Unset()
			c.JSON(200, iff)
		} else {
			sw := "switch"
			iff.SwitchId.Set(i)
			iff.ConnectTo.Set(&sw)
			c.JSON(200, iff)
		}
		//c.JSON(200, gin.H{"status": "OK"})

		//c.JSON(200, req)
	} else {
		c.JSON(404, nil)
	}
}
