/*
 * さくらのVPS APIドキュメント
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.5.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package helper

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"time"

	sakuravps "github.com/g1eng/sakura_vps_client_go"
	"github.com/g1eng/savac/pkg/core"
	"github.com/g1eng/savac/testutil/test_parameters"
	"github.com/gin-gonic/gin"
)

type ServerAPI struct {
}

var monitoringDeleted = false

// DeleteServerMonitorings Delete /vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id
// サーバーのサーバー監視情報を削除する
func (api *ServerAPI) DeleteServerMonitorings(c *gin.Context) {
	// Your handler implementation
	c.JSON(http.StatusNoContent, gin.H{"status": "NO CONTENT"})
}

// Get /vps/api/v7/servers/:server_id
// サーバー情報を取得する
func (api *ServerAPI) GetServer(c *gin.Context) {
	if c.Param("server_id") == fmt.Sprintf("%d", test_parameters.DefaultServer.Id) {
		c.JSON(200, test_parameters.DefaultServer)
		return
	} else if c.Param("server_id") == fmt.Sprintf("%d", test_parameters.SpecialServer.Id) {
		c.JSON(200, test_parameters.SpecialServer)
		return
	}
	// Your handler implementation
	c.JSON(http.StatusNotFound, gin.H{"status": "NO SERVER"})
}

// Get /vps/api/v7/servers/:server_id/interfaces/:interface_id
// サーバーのインターフェース情報を取得する
func (api *ServerAPI) GetServerInterface(c *gin.Context) {
	if c.Param("server_id") == fmt.Sprintf("%d", test_parameters.SampleUnregisteredServerId) {
		c.JSON(http.StatusNotFound, gin.H{"status": "NO SERVER"})
		return
	}
	c.JSON(200, test_parameters.DefaultInterface)
}

// Get /vps/api/v7/servers/:server_id/interfaces
// サーバーのインターフェース情報一覧を取得する
func (api *ServerAPI) GetServerInterfaceList(c *gin.Context) {
	if c.Param("server_id") == fmt.Sprintf("%d", test_parameters.SampleUnregisteredServerId) {
		c.JSON(http.StatusNotFound, gin.H{"status": "NO SERVER"})
		return
	}
	res := sakuravps.NewGetServerInterfaceList200ResponseWithDefaults()
	res.Results = test_parameters.DummyInterfaces
	c.JSON(200, res)
}

// Get /vps/api/v7/servers/:server_id/limitation
// サーバーの制限情報を取得する
func (api *ServerAPI) GetServerLimitation(c *gin.Context) {
	// Your handler implementation
	c.JSON(http.StatusNotImplemented, gin.H{"status": "NOIP"})
}

// Get /vps/api/v7/servers
// サーバー情報一覧を取得する
func (api *ServerAPI) GetServerList(c *gin.Context) {
	res := sakuravps.NewGetServerList200ResponseWithDefaults()
	var (
		pageNum int32 = 1
		perPage int32 = 10
	)
	if r, ok := c.GetQuery("page"); ok {
		if r != "" {
			pageNumInt, _ := strconv.Atoi(r)
			pageNum = int32(pageNumInt) // nolint
		}
		if rp, ok := c.GetQuery("per_page"); ok {
			if rp != "" {
				perPageInt, _ := strconv.Atoi(rp)
				perPage = int32(perPageInt) // nolint
			}
		}
	}

	maxPage := int32(len(test_parameters.DummyServers))/perPage + 1
	if pageNum > maxPage {
		log.Fatalln(errors.New("invalid page number (exceeded resource count)"))
	}
	if maxPage > pageNum {
		res.Count = perPage
		res.Results = test_parameters.DummyServers[(pageNum-1)*perPage : pageNum*perPage]
		tmp := fmt.Sprintf("%d", pageNum+1)
		res.Next.Set(&tmp)
		if pageNum != 0 {
			tmp2 := fmt.Sprintf("%d", pageNum-1)
			res.Previous.Set(&tmp2)
		}
	} else {
		res.Count = int32(len(test_parameters.DummyServers)) % perPage
		res.Results = test_parameters.DummyServers[(pageNum-1)*perPage:]
		tmp := fmt.Sprintf("%d", pageNum-1)
		res.Previous.Set(&tmp)
	}

	c.JSON(200, res)
}

// GetServerMonitoring Get /vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id
// サーバーのサーバー監視情報を取得する
func (api *ServerAPI) GetServerMonitoring(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, test_parameters.DefaultPingMonitoring)
}

// GetServerMonitoringHealth Get /vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id/health
// サーバー監視の監視状態を取得する
func (api *ServerAPI) GetServerMonitoringHealth(c *gin.Context) {
	now := time.Now()
	ok := "healthy"
	resp := sakuravps.ServerMonitoringHealth{
		LastCheckedAt:       *sakuravps.NewNullableTime(&now),
		Status:              *sakuravps.NewNullableString(&ok),
		LastStatusChangedAt: *sakuravps.NewNullableTime(&now),
	}
	// Your handler implementation
	c.JSON(200, resp)
}

// GetServerMonitoringList Get /vps/api/v7/servers/:server_id/monitorings
// サーバーのサーバー監視情報一覧を取得する
func (api *ServerAPI) GetServerMonitoringList(c *gin.Context) {
	res := sakuravps.NewGetServerMonitoringList200ResponseWithDefaults()
	res.Count = int32(len(test_parameters.DummyMonitoring))
	res.Results = test_parameters.DummyMonitoring
	c.JSON(200, res)
}

// Get /vps/api/v7/servers/:server_id/power-status
// サーバーの電源状態を取得する
func (api *ServerAPI) GetServerPowerStatus(c *gin.Context) {
	resp := sakuravps.ServerPowerStatus{Status: test_parameters.DefaultServer.PowerStatus}
	c.JSON(200, resp)
}

// Get /vps/api/v7/servers/:server_id/video-device
// サーバーのビデオデバイスの設定を取得する
func (api *ServerAPI) GetServerVideoDevice(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{"status": "fail"})
}

// Get /vps/api/v7/servers/:server_id/vnc-console-keymap
// コンパネのVNCコンソールのキーマップ情報を取得する
func (api *ServerAPI) GetServerVncConsoleKeymap(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{"status": "fail"})
}

// Post /vps/api/v7/servers/:server_id/force-reboot
// サーバーを強制再起動する
func (api *ServerAPI) PostServerForceReboot(c *gin.Context) {
	test_parameters.DefaultServer.PowerStatus = "power_on"
	c.Status(200)
}

// PostServerMonitoring Post /vps/api/v7/servers/:server_id/monitorings
// サーバーのサーバー監視を作成する
func (api *ServerAPI) PostServerMonitoring(c *gin.Context) {
	var s core.ServerMonitoringMeta
	data, _ := io.ReadAll(c.Request.Body)
	err := json.Unmarshal(data, &s)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	resp := core.ServerMonitoringMeta{
		Id:                   s.Id,
		Name:                 s.Name,
		Description:          s.Description,
		MonitoringResourceId: s.MonitoringResourceId,
		UpdateStatus:         s.UpdateStatus,
		Settings:             s.Settings,
	}
	c.JSON(200, resp)
}

// Post /vps/api/v7/servers/:server_id/mount-disc
// サーバーにディスクをマウントする
func (api *ServerAPI) PostServerMountDisc(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /vps/api/v7/servers/:server_id/power-on
// サーバーを起動する
func (api *ServerAPI) PostServerPowerOn(c *gin.Context) {
	serverId := c.Param("server_id")
	if serverId == fmt.Sprintf("%d", test_parameters.DefaultServer.Id) {
		if test_parameters.DefaultServer.PowerStatus == "power_on" {
			c.Status(http.StatusConflict)
			return
		}
		test_parameters.DefaultServer.PowerStatus = "power_on"
	} else if serverId == fmt.Sprintf("%d", test_parameters.SpecialServer.Id) {
		if test_parameters.SpecialServer.PowerStatus == "power_on" {
			c.Status(http.StatusConflict)
			return
		}
		test_parameters.SpecialServer.PowerStatus = "power_on"
	}
	c.Status(200)
}

// Post /vps/api/v7/servers/:server_id/shutdown
// サーバーをシャットダウンする
func (api *ServerAPI) PostServerShutdown(c *gin.Context) {
	if test_parameters.DefaultServer.PowerStatus == "power_off" {
		c.Status(http.StatusConflict)
		return
	}
	c.Status(200)
}

// Put /vps/api/v7/servers/:server_id
// サーバー情報を更新する
func (api *ServerAPI) PutServer(c *gin.Context) {
	// Your handler implementation
	var req PutServerRequest
	err := c.ShouldBind(&req)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	test_parameters.DefaultServer.Name = req.Name
	test_parameters.DefaultServer.Description = req.Description
	c.JSON(200, test_parameters.DefaultServer)
}

// Put /vps/api/v7/servers/:server_id/interfaces/:interface_id
// サーバーのインターフェース情報を更新する
func (api *ServerAPI) PutServerInterface(c *gin.Context) {
	if c.Param("server_id") == fmt.Sprintf("%d", test_parameters.SampleUnregisteredServerId) {
		c.JSON(http.StatusNotFound, gin.H{"error": "server_id does not exist"})
		return
	} else if c.Param("interface_id") == fmt.Sprintf("%d", test_parameters.SampleUnregisteredServer1InterfaceId) {
		c.JSON(http.StatusNotFound, gin.H{"error": "server_id does not exist"})
		return
	}
	var req struct {
		SwitchID int32 `json:"switch_id"`
	}
	err := c.ShouldBind(&req)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	if req.SwitchID == test_parameters.SampleUnregisteredSwitchId {
		c.JSON(http.StatusBadRequest, gin.H{"error": "switch_id does not exist"})
		return
	}

	switchIdString := fmt.Sprintf("%d", req.SwitchID)
	test_parameters.DefaultInterface.ConnectTo = *sakuravps.NewNullableString(&switchIdString)

	c.JSON(200, test_parameters.DefaultInterface)
}

// Put /vps/api/v7/servers/:server_id/ipv4-ptr
// サーバーのipv4の逆引きホスト名を更新する
func (api *ServerAPI) PutServerIpv4Ptr(c *gin.Context) {
	var req PutServerIpv4PtrRequest
	err := c.ShouldBind(&req)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	test_parameters.DefaultServer.Ipv4.Ptr = req.Hostname
	c.JSON(200, gin.H{"ptr": req.Hostname})
}

// Put /vps/api/v7/servers/:server_id/ipv6-ptr
// サーバーのipv6の逆引きホスト名を更新する
func (api *ServerAPI) PutServerIpv6Ptr(c *gin.Context) {
	var req PutServerIpv4PtrRequest
	err := c.ShouldBind(&req)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	test_parameters.DefaultServer.Ipv6.Ptr = *sakuravps.NewNullableString(&req.Hostname)
	c.JSON(200, gin.H{"ptr": req.Hostname})
}

// PutServerMonitoring Put /vps/api/v7/servers/:server_id/monitorings/:server_monitoring_id
// サーバーのサーバー監視情報を更新する
func (api *ServerAPI) PutServerMonitoring(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /vps/api/v7/servers/:server_id/video-device
// サーバーのビデオデバイスの設定を更新する
func (api *ServerAPI) PutServerVideoDevice(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /vps/api/v7/servers/:server_id/vnc-console-keymap
// コンパネのVNCコンソールのキーマップ情報を変更する
func (api *ServerAPI) PutServerVncConsoleKeymap(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}
