/*
 * さくらのVPS APIドキュメント
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.5.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package helper

import (
	"encoding/json"
	"fmt"
	"io"

	sakuravps "github.com/g1eng/sakura_vps_client_go"
	"github.com/g1eng/savac/testutil/test_parameters"
	"github.com/gin-gonic/gin"
)

type ApiKeyAPI struct {
}

// DeleteApiKey Delete /vps/api/v7/api-keys/:api_key_id
// APIキーを削除する
func (api *ApiKeyAPI) DeleteApiKey(c *gin.Context) {
	for i, key := range test_parameters.DummyApiKeys {
		if c.Param("api_key_id") == fmt.Sprintf("%d", key.Id) {
			test_parameters.DummyApiKeys = append(test_parameters.DummyApiKeys[:i], test_parameters.DummyApiKeys[i:]...)
			c.JSON(204, nil)
			return
		}
	}
	c.JSON(404, []string{})
}

// DeleteRole Delete /vps/api/v7/roles/:role_id
// ロールを削除する
func (api *ApiKeyAPI) DeleteRole(c *gin.Context) {
	for _, r := range test_parameters.DummyRoles {
		if c.Param("role_id") == fmt.Sprintf("%d", r.Id) {
			c.JSON(204, r)
			return
		}
	}
	c.JSON(404, nil)
}

// GetApiKey Get /vps/api/v7/api-keys/:api_key_id
// APIキーを取得する
func (api *ApiKeyAPI) GetApiKey(c *gin.Context) {
	for _, key := range test_parameters.DummyApiKeys {
		if c.Param("api_key_id") == fmt.Sprintf("%d", key.Id) {
			c.JSON(200, key)
			return
		}
	}
	c.JSON(404, []string{})
}

// GetApiKeyList Get /vps/api/v7/api-keys
// APIキーの一覧を取得する
func (api *ApiKeyAPI) GetApiKeyList(c *gin.Context) {
	res := sakuravps.NewGetApiKeyList200ResponseWithDefaults()
	n := sakuravps.NewNullableString(nil)
	res.Next = *n
	res.Previous = *n
	res.Count = int32(len(test_parameters.DummyApiKeys)) // nolint
	res.Results = test_parameters.DummyApiKeys
	c.JSON(200, res)
}

// GetPermissionList Get /vps/api/v7/permissions
// 権限の一覧を取得する
func (api *ApiKeyAPI) GetPermissionList(c *gin.Context) {
	res := sakuravps.NewGetPermissionList200ResponseWithDefaults()
	n := sakuravps.NewNullableString(nil)
	res.Next = *n
	res.Previous = *n
	res.Count = int32(len(test_parameters.DummyRoles)) // nolint
	res.Results = test_parameters.DummyPermissions
	c.JSON(200, res)
}

// GetRole Get /vps/api/v7/roles/:role_id
// ロールを取得する
func (api *ApiKeyAPI) GetRole(c *gin.Context) {
	for _, role := range test_parameters.DummyRoles {
		if c.Param("role_id") == fmt.Sprintf("%d", role.Id) {
			c.JSON(200, role)
			return
		}
	}
	c.JSON(404, []string{})
}

// GetRoleList Get /vps/api/v7/roles
// ロール一覧を取得する
func (api *ApiKeyAPI) GetRoleList(c *gin.Context) {
	res := sakuravps.NewGetRoleList200ResponseWithDefaults()
	n := sakuravps.NewNullableString(nil)
	res.Next = *n
	res.Previous = *n
	res.Count = int32(len(test_parameters.DummyRoles)) // nolint
	res.Results = test_parameters.DummyRoles
	c.JSON(200, res)
}

// PostApiKey Post /vps/api/v7/api-keys
// APIキーを作成する
func (api *ApiKeyAPI) PostApiKey(c *gin.Context) {
	var key sakuravps.ApiKey
	data, _ := io.ReadAll(c.Request.Body)
	err := json.Unmarshal(data, &key)
	if err != nil {
		c.JSON(400, nil)
		return
	}
	test_parameters.DummyApiKeys = append(test_parameters.DummyApiKeys, key)
	c.JSON(200, key)
}

// PostApiKeyRotate Post /vps/api/v7/api-keys/:api_key_id/rotate
// APIキーのトークンのローテーションを行う
func (api *ApiKeyAPI) PostApiKeyRotate(c *gin.Context) {
	for i, key := range test_parameters.DummyApiKeys {
		if c.Param("api_key_id") == fmt.Sprintf("%d", key.Id) {
			test_parameters.DummyApiKeys[i].Token = "nextokokokokokokokokokokokokokokokokok"
			c.JSON(200, test_parameters.DefaultApiKey)
			return
		}
	}
	c.JSON(404, nil)
}

// PostRole Post /vps/api/v7/roles
// ロールを作成する
func (api *ApiKeyAPI) PostRole(c *gin.Context) {
	var role sakuravps.Role
	data, _ := io.ReadAll(c.Request.Body)
	err := json.Unmarshal(data, &role)
	if err != nil {
		c.JSON(400, nil)
	} else {
		test_parameters.DummyRoles = append(test_parameters.DummyRoles, role)
		c.JSON(200, role)
	}
}

// PutApiKey Put /vps/api/v7/api-keys/:api_key_id
// APIキーを更新する
func (api *ApiKeyAPI) PutApiKey(c *gin.Context) {
	if c.Param("api_key_id") == fmt.Sprintf("%d", test_parameters.DefaultApiKey.Id) {
		c.JSON(200, test_parameters.DefaultApiKey)
	} else {
		c.JSON(404, nil)
	}
}

// PutRole Put /vps/api/v7/roles/:role_id
// ロールを更新する
func (api *ApiKeyAPI) PutRole(c *gin.Context) {
	var role sakuravps.Role
	data, _ := io.ReadAll(c.Request.Body)
	err := json.Unmarshal(data, &role)
	if err != nil {
		c.JSON(400, nil)
		return
	}
	for i, r := range test_parameters.DummyRoles {
		if c.Param("role_id") == fmt.Sprintf("%d", r.Id) {
			test_parameters.DummyRoles[i] = r
			c.JSON(200, r)
			return
		}
	}
	c.JSON(404, nil)
}
