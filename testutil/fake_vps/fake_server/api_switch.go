/*
 * さくらのVPS APIドキュメント
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 4.5.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package helper

import (
	"fmt"
	"net/http"

	sakuravps "github.com/g1eng/sakura_vps_client_go"
	"github.com/g1eng/savac/testutil/test_parameters"
	"github.com/gin-gonic/gin"
)

type SwitchAPI struct {
}

// Delete /vps/api/v7/switches/:switch_id
// スイッチを削除する
func (api *SwitchAPI) DeleteSwitch(c *gin.Context) {
	c.Status(http.StatusNoContent)
}

// Get /vps/api/v7/switches/:switch_id
// スイッチ情報を取得する
func (api *SwitchAPI) GetSwitch(c *gin.Context) {
	for _, s := range test_parameters.DummySwitches {
		if c.Param("switch_id") == fmt.Sprintf("%d", s.Id) {
			c.JSON(200, s)
			return
		}
	}
	c.JSON(404, gin.H{"status": "not found"})
}

// Get /vps/api/v7/switches
// スイッチ情報一覧を取得する
func (api *SwitchAPI) GetSwitchList(c *gin.Context) {
	resp := sakuravps.GetSwitchList200Response{
		Count:   int32(len(test_parameters.DummySwitches)),
		Results: test_parameters.DummySwitches,
	}
	c.JSON(200, resp)
}

// Post /vps/api/v7/switches
// スイッチを作成する
func (api *SwitchAPI) PostSwitch(c *gin.Context) {
	var req PostSwitchRequest
	err := c.ShouldBind(&req)
	if err != nil {
		c.JSON(400, gin.H{"status": "bad request"})
		return
	}
	sw := sakuravps.Switch{
		Id:          19888,
		Name:        req.Name,
		Description: req.Description,
	}
	test_parameters.DummySwitches = append(test_parameters.DummySwitches, sw)
	c.JSON(200, sw)
}

// Put /vps/api/v7/switches/:switch_id
// スイッチ情報を更新する
func (api *SwitchAPI) PutSwitch(c *gin.Context) {
	for i, s := range test_parameters.DummySwitches {
		if c.Param("switch_id") == fmt.Sprintf("%d", s.Id) {
			var req struct {
				Name        string `json:"name"`
				Description string `json:"description"`
			}
			err := c.ShouldBind(&req)
			if err != nil {
				c.JSON(500, gin.H{"status": "bad request"})
				return
			}
			test_parameters.DummySwitches[i].Name = req.Name
			test_parameters.DummySwitches[i].Description = req.Description
			c.JSON(200, test_parameters.DummySwitches[i])
			return
		}
	}
	c.JSON(404, gin.H{"status": "bad request"})
}
